import Input from '../src/components/Input';
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { Dispatch, SetStateAction, useEffect, useRef, useState } from 'react';
import { GetChatMessages, GetChats, GetMyInfo, GetViaUrl, ReactMessage } from '../src/services/graphRequests';
import { IChat, IChatMessages, IConversations, ILoadingTeamsApp, IMe, IMessage, IReaction } from '../src/interfaces';
import { DateTime } from 'luxon';
import { HiOutlineLogout } from 'react-icons/hi'
import { TbRefresh } from 'react-icons/tb'
import Button from 'react-bootstrap/Button';
import Modal from 'react-bootstrap/Modal';
import emojis from '../src/components/emojis.json'
import { toast, ToastContainer, ToastOptions } from 'react-toastify';
import LoginPage from '../src/pages/LoginPage';
import 'react-toastify/dist/ReactToastify.css';
import TeamsAppPage from '../src/pages/TeamsAppPage';

export default function Home() {

  const [token, setToken] = useState('');
  const [loading, setLoading] = useState(false);
  const [me, setMe] = useState<IMe>();

  const handleAlerts = (msg: any, type: 'default' | 'info' | 'success' | 'warning' | 'error' = 'default', timeMs: number = 10000) => {

    console.error(msg);

    let message = String(msg);
    if (msg?.response?.data?.error) message = `(${msg.response.data.error.code}) ${msg.response.data.error.message}`;

    const toastBody: ToastOptions = {
      position: "top-center",
      autoClose: timeMs,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "colored",
    }

    if (type === 'info') toast.info(message, toastBody);
    if (type === 'success') toast.success(message, toastBody);
    if (type === 'warning') toast.warning(message, toastBody);
    if (type === 'error') toast.error(message, toastBody);
    if (type === 'default') toast(message, toastBody);
  }

  const handleLogin = () => {
    if (!token) return
    setLoading(true)
    GetMyInfo(token)
      .then(resp => setMe(resp.data))
      .catch(e => handleAlerts(e, 'error'))
      .finally(() => setLoading(false))
  }

  const handleLogout = () => {
    if (window.confirm('Tem certeza que deseja sair?')) setMe(undefined);
  }


  return (
    <div>

      <Head>
        <title>Teams Quick Viewer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
      />

      <main className={styles.main}>
        {!me ?
          <LoginPage
            token={token}
            loading={loading}
            handleLogin={handleLogin}
            handleAlerts={handleAlerts}
            setToken={setToken}
            />
            :
            <TeamsAppPage
            handleLogout={handleLogout}
            handleAlerts={handleAlerts}
            token={token}
            me={me} />
        }
      </main>

    </div>
  )

}

export function Home1() {

  const [token, setToken] = useState('');
  const [loadingMe, setLoadingMe] = useState(false);
  const [me, setMe] = useState<IMe>()

  const handleLogin = () => {
    if (!token) return
    setLoadingMe(true)
    GetMyInfo(token)
      .then(resp => setMe(resp.data))
      .catch(e => { console.error(e); alert('Erro. Cheque o console para mais detalhes...') })
      .finally(() => setLoadingMe(false))
  }

  const handleLogout = () => {
    setMe(undefined)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Teams Quick Viewer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
      />

      <main className={styles.main}>
        {!me ?
          <LoginCard
            handleLogin={handleLogin}
            loadingMe={loadingMe}
            setToken={setToken}
            token={token} />
          :
          <Conversations
            handleLogout={handleLogout}
            token={token}
            me={me} />
        }
      </main>

    </div>
  )
}

const Conversations = ({ token, me, handleLogout }: IConversations) => {

  const [chats, setChats] = useState<IChat[]>();
  const [nextLink, setNextLink] = useState('');
  const [status, setStatus] = useState('');
  const [loading, setLoading] = useState<ILoadingTeamsApp>({ chats: false, moreChats: false, chatMessages: false });
  const [search, setSearch] = useState('');
  const [selectedChat, selectChat] = useState<IChatMessages>();

  const handleGetThreads = () => {
    setLoading(p => ({ ...p, chats: true }));
    setStatus('Carregando chats...')
    GetChats(token)
      .then(chatsData => {
        console.log(chatsData.data);
        setNextLink(chatsData?.data?.["@odata.nextLink"] || '')
        const newChats: IChat[] = chatsData.data.value;
        setChats(handleAddChats(newChats, me));
      })
      .catch(e => { console.error(e); alert('Erro. Cheque o console para mais detalhes...') })
      .finally(() => {
        setLoading(p => ({ ...p, chats: false }));
        setStatus('');
      })
  }

  const handleGetMoreChats = () => {
    setLoading(p => ({ ...p, moreChats: true }));
    GetViaUrl(nextLink, token)
      .then(chatsData => {
        console.log(chatsData.data);
        setNextLink(chatsData?.data?.["@odata.nextLink"] || '')
        const newChats: IChat[] = chatsData.data.value;
        const allChats = chats && chats.length ? [...chats, ...newChats] : newChats;
        setChats(handleAddChats(allChats, me))
      })
      .catch(e => { console.error(e); alert('Erro. Cheque o console para mais detalhes...') })
      .finally(() => {
        setLoading(p => ({ ...p, moreChats: false }));
        setStatus('');
      })

  }

  const handleSelectChat = (id: string) => {
    setLoading(p => ({ ...p, chatMessages: true }));
    setStatus('Obtendo mensagens...')
    GetChatMessages(id, token)
      .then(chatMessagesData => {
        const cm = chatMessagesData.data;
        console.log(cm.value);
        function sortByTime(a: any, b: any) {
          if (a.createdDateTime < b.createdDateTime) return 1;
          if (a.createdDateTime > b.createdDateTime) return -1;
          return 0;
        }
        selectChat({
          chat: chats?.filter(c => c.id === id)[0] as IChat,
          messages: cm.value.sort(sortByTime),
          nextLink: cm["@odata.nextLink"],
        });
      })
      .catch(e => { console.error(e); alert('Erro. Cheque o console para mais detalhes...') })
      .finally(() => {
        setStatus('');
        setLoading(p => ({ ...p, chatMessages: false }))

        let msgsRef = document.getElementById("msgsRef");
        if (msgsRef) msgsRef.scrollTop = msgsRef.scrollHeight;
      })

  }

  useEffect(() => { handleGetThreads(); }, []);
  useEffect(() => console.log(nextLink), [nextLink]);

  const filteredChats = search ? chats?.filter(c => (c?.topic || '').toLowerCase().includes(search.toLowerCase())) : chats;

  return (
    <>

      <style jsx>{`
        .container-fluid {
          height: 100vh !important;
        }
        .row-nav {height:5vh;}
        .row-chat {
          height:95vh;
        }
        .user-info{column-gap: 15px}
        .chats-screen {
          height: 100%;
          overflow: auto;
        }
        .chat-button {
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          margin: 2px 0;
          padding: 8px 5px;
          transition: all 100ms;
          border-radius: 5px;
          cursor: pointer;
        }
        .chat-button:hover {
          background-color: #777;
        }
        .chat-row-messages {
          height: 100%;
          overflow: auto;
          box-shadow: rgba(0,0,0, 0.25) 0px 2px 5px -1px inset, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px inset;
          border-radius: 0 15px 15px 0;
        }
        .chat-messages {
          display:flex;
          flex-direction: column-reverse;
        }
        .chat-message-item {
          display: flex;
          flex-direction: column;
          gap: 10px;
          margin: 10px 0;
          padding: 10px;
          border-radius: 4px;
        }
        .msg-from {
          font-size: 13px;
          color: #AAA;
        }
        .my-message {
          background-color: #2F2F4A;
          align-items: flex-end;
        }
        .others-message {
          background-color: #292929;
        }
        `}</style>

      <div className='container-fluid'>
        <div className="row row-nav">
          <div className='col-12 d-flex align-items-center justify-content-between'>
            <span>{status}</span>
            <div className='d-flex flex-row align-items-center user-info'>
              <div className='d-flex flex-column align-items-end'>
                <span>{me.displayName}</span>
                <span className='text-muted'>{me.userPrincipalName}</span>
              </div>
              <button
                onClick={handleLogout}
                title='Sair da conta'
                className='btn btn-outline-danger d-flex align-items-center'>
                <HiOutlineLogout />
              </button>
            </div>
          </div>
        </div>
        <div className="row row-chat">
          <div className={`col-3 p-2 chats-screen ${styles.blue_scroll}`}>
            <div className='d-flex flex-row justify-content-between align-items-center'>
              <h2 className='fs-2'>Chats</h2>
              <button
                disabled={loading.chats || loading.moreChats || loading.chatMessages}
                onClick={handleGetThreads}
                title='Atualizar todos os chats'
                className='btn btn-dark d-flex align-items-center fs-4'>
                <TbRefresh />
              </button>
            </div>
            <div className="mt-3">
              <Input
                id='txtSearch'
                value={search}
                onChange={e => setSearch(e.target.value)}
                labelText='Pesquisar chat'
              />
            </div>
            <div className="mt-2 d-flex flex-column chats">
              {filteredChats?.map(chat => (
                <button
                  key={chat.id}
                  disabled={loading.chats || loading.moreChats || loading.chatMessages}
                  onClick={() => handleSelectChat(chat.id)}
                  className={`btn btn-dark chat-button ${selectedChat?.chat.id === chat.id ? 'active' : ''}`}>{chat.topic}</button>
              ))}

              {nextLink ?
                <button
                  disabled={loading.chats || loading.moreChats || loading.chatMessages}
                  onClick={handleGetMoreChats}
                  className='btn btn-outline-light'>{loading.moreChats ? 'Obtendo...' : 'Obter mais...'}</button>
                : null}

            </div>
          </div>
          <div className={`col-9 p-2 chat-row-messages ${styles.blue_scroll}`}>
            <div className='w-100 chat-messages' id='msgsRef'>

              {selectedChat?.messages?.map(msg => {
                const myMsg = msg.from?.user?.id === me.id;
                return (
                  <div className='d-flex flex-row' key={msg.id}>
                    {myMsg ? <div className='w-25' /> : null}
                    <div className={`chat-message-item w-75 ${myMsg ? 'my-message' : 'others-message'}`}>
                      <span className='msg-from'>{msg.from?.user?.displayName} - <FriendlyDate date={DateTime.fromISO(msg.createdDateTime)} />
                        <BSModalReaction chatId={selectedChat.chat.id} msg={msg} token={token} />
                      </span>
                      <div dangerouslySetInnerHTML={{ __html: msg.body.content }} />
                    </div>
                    {!myMsg ? <div className='w-25' /> : null}
                  </div>
                )
              })}
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

interface IBSModalReaction {
  msg: IMessage;
  chatId: string;
  token: string;
}

const BSModalReaction = ({ msg, chatId, token }: IBSModalReaction) => {
  const [opened, setOpen] = useState(false);

  const handleClose = () => setOpen(false);
  const handleShow = () => setOpen(true);

  const handleReactMessage = (emojiUnicode: string) => {

    ReactMessage(chatId, msg.id, emojiUnicode, token)
      .catch(e => { console.error(e); alert('Erro. Cheque o console para mais detalhes...') })
      .finally(handleClose)
  }

  useEffect(() => {
    if (!opened) return;
    console.log(msg)
  }, [opened])

  return (
    <>
      <button
        onClick={handleShow}
        type='button'
        data-bs-toggle="modal"
        data-bs-target="#reactionModal"
        className='btn align-items-center text-white py-0 my-0'
        title='Adicionar reação'>🗯</button>

      <Modal show={opened} onHide={handleClose}>
        <Modal.Header closeButton className='bg-dark text-white' />
        <Modal.Body className='bg-dark'>
          <div className="row">
            <style jsx>{`.emoji-container {gap: 5px;}`}</style>

            <div className='d-flex flex-row align-items-center pb-3 emoji-container' >
              {msg.reactions.map(r => {
                const rEmoji = emojis.filter(e => e.id === r.reactionType)[0]?.unicode || '?';
                return <span>{rEmoji}</span>
              })}
            </div>
            {msg.reactions && msg.reactions.length ? <hr /> : null}
          </div>
          <div className="row">
            {emojis.map(emoji => (
              <Button
                key={emoji.id}
                variant='dark'
                className='col-2'
                onClick={() => handleReactMessage(emoji.unicode)}
                title={emoji.descricao}>
                {emoji.unicode}
              </Button>
            ))}
          </div>
        </Modal.Body>

        <Modal.Footer className='bg-dark'>
          <Button variant="secondary" onClick={handleClose}>Fechar</Button>
        </Modal.Footer>
      </Modal>
    </>
  )
}

interface ILoginCard {
  token: string;
  setToken: Dispatch<SetStateAction<string>>;
  handleLogin: () => void;
  loadingMe: boolean;
}
const LoginCard = ({ token, setToken, handleLogin, loadingMe }: ILoginCard) => (

  <div className="card bg-dark p-4">
    <Input
      id='txtToken'
      value={token}
      onChange={e => setToken(e.target.value)}
      labelText='Insira o Bearer Token'
    />
    <button
      className='btn btn-primary'
      onClick={handleLogin}
      disabled={loadingMe || !token}>
      {loadingMe ? 'Carregando...' : 'Login'}
    </button>

  </div>
)

const handleAddChats = (chats: IChat[], me: IMe) => {

  const newChats = chats.map(chat => {

    let topic: string = chat.topic || '';

    const membersWithoutMe = chat.members.filter(member => member.userId !== me?.id)

    if (chat.chatType === 'oneOnOne' && chat.members.length > 1) {

      topic = membersWithoutMe
        .map(member => member.displayName)
        .join(', ')

    } else if (chat.chatType === 'group' && !chat.topic) {

      topic = membersWithoutMe
        .map(member => member.displayName.split(' ')[0])
        .join(', ')
    }

    if (!topic) {
      console.groupCollapsed('Não consegui obter o tópico desse:')
      console.log(chat);
      console.groupEnd();
    }

    return { ...chat, topic }

  });

  const allChats = [...chats, ...newChats];
  return Array.from(new Map(allChats.map(item => [item['id'], item])).values())

}

export function FriendlyDate({ date }: { date: DateTime; }): JSX.Element {
  const now = DateTime.now().setLocale('pt-BR');
  const dateTime = date.setLocale('pt-BR');
  const isDateHasSameMonth = date.hasSame(now, 'month');
  const friendlyDates = {
    tomorrow: `amanhã às ${dateTime.toFormat('HH:mm')}`,
    today: `hoje às ${dateTime.toFormat('HH:mm')}`,
    yesterday: `ontem às ${dateTime.toFormat('HH:mm')}`,
    week: `${dateTime.toFormat(`cccc (dd${isDateHasSameMonth ? '' : ' LLL'})`)} às ${dateTime.toFormat('HH:mm')}`,
    year: `${dateTime.toFormat('dd LLL')} às ${dateTime.toFormat('HH:mm')}`,
    fullDate: dateTime.toFormat('dd LLL yyyy HH:mm')
  };

  const Span = ({ children }: { children: any; }) => (
    <span title={dateTime.toFormat('dd/LL/yyyy HH:mm:ss')}>
      {children}
    </span>
  );

  if (dateTime.hasSame(now.plus({ days: 1 }), 'day'))
    return <Span>{friendlyDates.tomorrow}</Span>;

  if (dateTime.hasSame(now, 'day'))
    return <Span>{friendlyDates.today}</Span>;

  if (dateTime.hasSame(now.minus({ days: 1 }), 'day'))
    return <Span>{friendlyDates.yesterday}</Span>;

  if (dateTime.hasSame(now, 'week'))
    return <Span>{friendlyDates.week}</Span>;

  if (dateTime.hasSame(now, 'year'))
    return <Span>{friendlyDates.year}</Span>;

  return <Span>{friendlyDates.fullDate}</Span>;
}